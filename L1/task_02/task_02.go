package main

import (
	"fmt"
	"sync"
)

func main() {
  numbers := []int{2, 4, 6, 8, 10}

  /* Создаём экземпляр WaitGroup для синхронизации, который позволит 
  дождаться завершения выполнения всех горутин, запущенных в рамках программы. */
    var wg sync.WaitGroup

	// Создаём буферизированный канал на количество значений равной длине массива.
    results := make(chan int, len(numbers))

	// Добавляем количество горутин, которые будут выполняться.
	wg.Add(len(numbers))

    for _, number := range numbers {
    // Запускаем горутину.
	// Анонимная функция принимает один аргумент.
        go func(n int) {
			// Уменьшает счётчик wg на единицу в при завершении горутины.
            defer wg.Done()
            results <- n * n
        }(number) // Передаем number, как агрумент.
    }

    go func() {
   /*Вызов wg.Wait() блокируется до тех пор, пока значение счетчика 
	в соответствующей переменной "wg" не станет равным нулю, что дает возможность всем горутинам завершить работу. */
        wg.Wait()
		// Закрываем канал 
        close(results)
    }()

    for result := range results {
        fmt.Println(result)
    }
}
	


